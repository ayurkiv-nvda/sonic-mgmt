# SONiC to SONiC image update on the running device.
# Command example:
# ansible-playbook -i inventory --limit SWITCH update.yml --tags update -b -vvvvv -e CMD image_url=URL

- name: Simx workaround
  set_fact: simx=no
  when: simx is not defined

- fail: msg="image_url variable should be provided."
  when: image_url is not defined

- name: Get timestamp
  set_fact: timestamp="{{lookup('pipe','date +%Y%m%d%H%M%S')}}"

- name: Get temporary filename
  set_fact: filename="/tmp/update_image_{{ timestamp }}"

- name: Download SONiC image.
  local_action: get_url url={{ image_url }} dest={{ filename }}

- name: Upload SONiC image to device.
  copy:
    src: "{{ filename }}"
    dest: "{{ filename }}"

- block:

  - set_fact:
      delimiter: "_"

  - name: Check correct syntax for installer tool on DUT.
    shell: "sonic_installer list"
    register: syntax_output
    ignore_errors: true

  - name: Set command syntax based on current image branch
    when: syntax_output.rc != 0
    set_fact:
      delimiter: "-"

- name: Extract version of the SONiC image file
  command: sonic{{ delimiter }}installer binary{{ delimiter }}version {{ filename }}
  register: image_file_version

- name: Remove SONiC image from local server.
  local_action: file path={{ filename }} state=absent

- name: "Get image facts"
  image_facts:

- name: Compare running version with image file version
  set_fact:
    update_required: "{{ ansible_image_facts['current'] != image_file_version.stdout }}"

- block:

  - name: Update SONiC image.
    command: sonic{{ delimiter }}installer install {{ filename }} -y
    register: update_output

  - name: Show update result
    debug: msg="{{ update_output.stdout_lines }}"

  # https://github.com/Azure/sonic-buildimage/issues/3881 db migration failed if switch image from master to 201811
  # https://github.com/Azure/sonic-buildimage/issues/3986 snmp AgentX socket bind failed
  - name: WR for the db migration issue and the snmp AgentX socket bind error in log
    file:
      path: "/host/old_config/{{ item }}"
      state: absent
    ignore_errors: true
    with_items:
      - "config_db.json"
      - "snmp.yml"

  when: update_required

- name: Ensure that target image is always default after reboot
  command: sonic{{ delimiter }}installer set{{ delimiter }}default {{ image_file_version.stdout }}

- name: Reboot device.
  command: reboot
  async: 300
  poll: 0
  ignore_errors: true

- name: Wait for device to go down.
  wait_for:
    host: "{{ ansible_ssh_host }}"
    port: 22
    state: stopped
    delay: 10
    timeout: 300
  connection: local

- name: Wait for device to come back.
  wait_for:
    host: "{{ ansible_ssh_host }}"
    port: 22
    state: started
    delay: 10
    timeout: 900
  connection: local

- name: Wait until all critical services are started
  shell: bash -c 'docker ps | grep {{ item }}'
  register: result
  until: result.rc == 0
  with_items:
    - swss
    - syncd
    - bgp
    - teamd
    - pmon
    - lldp
    - snmp
    - dhcp_relay
  retries: 10
  delay: 30

- name: Wait another minute to ensure that everything is working
  pause: seconds=60

- block:

  - name: Get current running firmware version
    shell: bash -c 'mlxfwmanager --query'
    register: result

  - name: Show firmware version
    debug: msg="{{ result.stdout_lines }}"

  when: simx != 'yes'

- block:

    - name: Deploy minigraph file.
      copy:
        src: "minigraph/{{ dut_minigraph }}"
        dest: "/etc/sonic/minigraph.xml"

    - name: Deploy specific device configuration files
      include: deploy_device_configs.yml
      vars:
        dut_hwsku: "{{ sonic_hwsku }}"
        dut_hostname: "{{ ansible_ssh_host }}"

    - name: Reload minigraph.
      shell: config load_minigraph -y

    - name: Save config.
      shell: config save -y

  when: dut_minigraph is defined

- name: Gathering minigraph facts about the device
  minigraph_facts: host={{ inventory_hostname }}
  tags: always

- name: Remove old ssh keys by address
  shell: ssh-keygen -R {{ minigraph_mgmt_interface.addr }}
  delegate_to: localhost
  ignore_errors: yes

- name: Remove old ssh keys by hostname
  shell: ssh-keygen -R {{ inventory_hostname }}
  delegate_to: localhost
  ignore_errors: yes

- block:

    - set_fact:
        intfs: "{% if minigraph_ports|length > 1 %}{{ '{' }}{% endif %}{{ minigraph_ports.keys() | join(',') }}{% if minigraph_ports|length > 1 %}{{ '}' }}{% endif %}"

    - name: Verify interfaces are up correctly
      command: bash -c "cat /sys/class/net/{{ intfs }}/operstate"
      register: out
      until: (out.rc == 0) and (out.stdout.find("down") == -1)
      retries: 30
      delay: 10

- block:

    - set_fact:
        pc_intfs: "{% if minigraph_portchannels|length > 1 %}{{ '{' }}{% endif %}{{ minigraph_portchannels.keys() | join(',') }}{% if minigraph_portchannels|length > 1 %}{{ '}' }}{% endif %}"

    - name: Verify PortChannel interfaces are up correctly
      command: bash -c "cat /sys/class/net/{{ pc_intfs }}/operstate"
      register: out
      until: (out.rc == 0) and (out.stdout.find("down") == -1)
      retries: 30
      delay: 10

  when: (topo == "t0") or (topo == "t1-lag")

- block:

    - set_fact:
        vlan_intfs: "{% if minigraph_vlans|length > 1 %}{{ '{' }}{% endif %}{{ minigraph_vlans.keys() | join(',') }}{% if minigraph_vlans|length > 1 %}{{ '}' }}{% endif %}"

    - name: Verify VLAN interfaces are up correctly
      command: bash -c "cat /sys/class/net/{{ vlan_intfs }}/operstate"
      register: out
      until: (out.rc == 0) and (out.stdout.find("down") == -1)
      retries: 30
      delay: 10

  when: topo == "t0"
