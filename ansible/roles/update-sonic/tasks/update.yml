# SONiC to SONiC image update on the running device.
# Command example: 
# ansible-playbook -i inventory --limit SWITCH update.yml --tags update -b -vvvvv -e CMD image_url=URL 

- fail: msg="image_url variable should be provided."
  when: image_url is not defined

- set_fact: timestamp="{{lookup('pipe','date +%Y%m%d%H%M%S')}}"

- set_fact: filename="/tmp/update_image_{{ timestamp }}"
- debug: var=filename

- name: Download SONiC image.
  local_action: get_url url={{ image_url }} dest={{ filename }}

- name: Upload SONiC image to device.
  copy:
    src: "{{ filename }}"
    dest: "{{ filename }}"

- name: Remove SONiC image from local server.
  local_action: file path={{ filename }} state=absent

- name: Update SONiC image.
  command: sh {{ filename }}
  register: update_output
  ignore_errors: yes

- fail: msg="{{ update_output.stdout }}"
  when:
    - update_output.rc != 0
    - "'Running SONiC has the same version' not in update_output.stdout"

- block:
    - name: Reboot device.
      command: /sbin/shutdown -r
      async: 0
      poll: 0
      ignore_errors: true
    
    - name: Wait for device to come back.
      local_action: wait_for host={{ ansible_ssh_host }} state=started

  when: "'Running SONiC has the same version' not in update_output.stdout"

- block:
    - name: Deploy minigraph file.
      copy:
        src: "minigraph/{{ dut_minigraph }}"
        dest: "/etc/sonic/minigraph.xml"

    - name: Get platform name.
      shell: show platform summary | grep -o "x86_64-mlnx_.*"
      register: platform_output

    - name: Deploy port config file.
      copy:
        src: "roles/sonicv2/files/ssw/{{ sonic_hwsku }}/port_config.ini"
        dest: "/usr/share/sonic/device/{{ platform_output.stdout }}/{{ sonic_hwsku }}/port_config.ini"
      when: sonic_hwsku == 'ACS-MSN2100'

    - name: Change default GW address.
      command: "sed -i \"s/gwaddr = ipaddress.IPAddress(int(mgmtipn.network) + 1)/gwaddr = ipaddress.IPAddress(int(mgmtipn.network) + 254)/\" /usr/local/lib/python2.7/dist-packages/minigraph.py"
      when: ansible_ssh_host != 'arc-mtbc-1001'

    - name: Reload minigraph.
      shell: yes | config load_minigraph

    - name: Save config.
      shell: yes | config save

#    - name: Restore firsttime
#      shell: 'touch /host/image-$(cat /etc/sonic/sonic_version.yml | grep build_version | cut -f2 -d" ")/platform/firsttime'

#    - name: Reboot device.
#      command: /sbin/shutdown -r
#      async: 0
#      poll: 0
#      ignore_errors: true

#    - name: Wait for device to come back.
#      local_action: wait_for host={{ ansible_ssh_host }} state=started

  when: dut_minigraph is defined

- name: Gathering minigraph facts about the device
  minigraph_facts: host={{ inventory_hostname }}
  connection: local
  become: no
  tags: always

- name: Verify interfaces are up correctly
  wait_for:
      path: /sys/class/net/{{ item }}/operstate
      search_regex: up
  with_items: "{{ minigraph_ports }}"
#  when: (sonic_hwsku == 'ACS-MSN2700' and item != 'Ethernet124') or (sonic_hwsku == 'ACS-MSN2100' and item != 'Ethernet36')

- name: Workaround. Wait for LAG interfaces.
  pause:
    minutes: 5
  when: topo == "t0" or topo == "t1-lag"

- name: Verify PortChannel interfaces are up correctly
  wait_for:
      path: /sys/class/net/{{ item }}/operstate
      search_regex: up
  with_items: "{{ minigraph_portchannels.keys() }}"

- name: Verify VLAN interfaces are up correctly
  wait_for:
      path: /sys/class/net/{{ item }}/operstate
      search_regex: up
  with_items: "{{ minigraph_vlans.keys() }}"

