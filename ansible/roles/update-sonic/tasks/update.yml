# SONiC to SONiC image update on the running device.
# Command example:
# ansible-playbook -i inventory --limit SWITCH update.yml --tags update -b -vvvvv -e CMD image_url=URL

- fail: msg="image_url variable should be provided."
  when: image_url is not defined

- set_fact: timestamp="{{lookup('pipe','date +%Y%m%d%H%M%S')}}"

- set_fact: filename="/tmp/update_image_{{ timestamp }}"
- debug: var=filename

- name: Download SONiC image.
  local_action: get_url url={{ image_url }} dest={{ filename }}

- name: Upload SONiC image to device.
  copy:
    src: "{{ filename }}"
    dest: "{{ filename }}"

- name: Remove SONiC image from local server.
  local_action: file path={{ filename }} state=absent

- name: Update SONiC image.
  command: sonic_installer install {{ filename }} -y
  register: update_output
  ignore_errors: yes

- fail: msg="{{ update_output.stdout }}"
  when:
    - update_output.rc != 0
    - "'Running SONiC has the same version' not in update_output.stdout"

- block:
    - name: Reboot device.
      command: reboot
      async: 300
      poll: 0
      ignore_errors: true

    - name: Wait for device to come back.
      wait_for:
        host: "{{ ansible_ssh_host }}"
        port: 22
        state: started
        delay: 180
        timeout: 900
      connection: local

  when: "'Running SONiC has the same version' not in update_output.stdout"

- block:

    # If upgrade from older version, firmware update is performed after reboot
    - name: Wait for switch fw update to finish
      command: bash -c 'ps aux | grep "[m]lxfwmanager" ; [ $? == 1 ]'
      register: output
      until: output.rc == 0
      retries: 12
      delay: 10
      ignore_errors: true

    - name: Wait for switch initialization to finish
      pause:
        seconds: 180

    - name: Deploy minigraph file.
      copy:
        src: "minigraph/{{ dut_minigraph }}"
        dest: "/etc/sonic/minigraph.xml"

    - name: Deploy port config file.
      copy:
        src: "roles/sonicv2/files/ssw/ACS-MSN2010/port_config_boxer01.ini"
        dest: "/usr/share/sonic/device/x86_64-mlnx_msn2010-r0/ACS-MSN2010/port_config.ini"
      when: sonic_hwsku == 'ACS-MSN2010'

    - name: Deploy port config file.
      copy:
        src: "roles/sonicv2/files/ssw/ACS-MSN2100/port_config.ini"
        dest: "/usr/share/sonic/device/x86_64-mlnx_msn2100-r0/ACS-MSN2100/port_config.ini"
      when: sonic_hwsku == 'ACS-MSN2100'

    - name: Deploy port config file.
      copy:
        src: "roles/sonicv2/files/ssw/ACS-MSN2700/port_config1004.ini"
        dest: "/usr/share/sonic/device/x86_64-mlnx_msn2700-r0/ACS-MSN2700/port_config.ini"
      when: ansible_ssh_host == 'arc-switch1004'

    - name: Deploy buffers patch.
      copy:
        src: "roles/sonic-common/files/buffers_config.sh"
        dest: "/home/admin/buffers_config.sh"
        mode: "0755"

    - name: Update buffers template.
      shell: "/home/admin/buffers_config.sh"
      become: "yes"

    - name: Reload minigraph.
      shell: config load_minigraph -y

    - name: Save config.
      shell: config save -y

  when: dut_minigraph is defined

- name: Gathering minigraph facts about the device
  minigraph_facts: host={{ inventory_hostname }}
  become: no
  tags: always

- block:

    - set_fact:
        intfs: "{% if minigraph_ports|length > 1 %}{{ '{' }}{% endif %}{{ minigraph_ports.keys() | join(',') }}{% if minigraph_ports|length > 1 %}{{ '}' }}{% endif %}"

    - name: Verify interfaces are up correctly
      command: bash -c "cat /sys/class/net/{{ intfs }}/operstate"
      register: out
      until: (out.rc == 0) and (out.stdout.find("down") == -1)
      retries: 30
      delay: 10

- block:

    - set_fact:
        pc_intfs: "{% if minigraph_portchannels|length > 1 %}{{ '{' }}{% endif %}{{ minigraph_portchannels.keys() | join(',') }}{% if minigraph_portchannels|length > 1 %}{{ '}' }}{% endif %}"

    - name: Verify PortChannel interfaces are up correctly
      command: bash -c "cat /sys/class/net/{{ pc_intfs }}/operstate"
      register: out
      until: (out.rc == 0) and (out.stdout.find("down") == -1)
      retries: 30
      delay: 10

  when: (topo == "t0") or (topo == "t1-lag")

- block:

    - set_fact:
        vlan_intfs: "{% if minigraph_vlans|length > 1 %}{{ '{' }}{% endif %}{{ minigraph_vlans.keys() | join(',') }}{% if minigraph_vlans|length > 1 %}{{ '}' }}{% endif %}"

    - name: Verify VLAN interfaces are up correctly
      command: bash -c "cat /sys/class/net/{{ vlan_intfs }}/operstate"
      register: out
      until: (out.rc == 0) and (out.stdout.find("down") == -1)
      retries: 30
      delay: 10

  when: topo == "t0"
