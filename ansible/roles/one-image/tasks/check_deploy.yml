# Check ONE image deploy
# Command example: 
# ANSIBLE_SCP_IF_SSH=y ansible-playbook -i inventory --limit SWITCH one_image.yml --tags check_deploy -b -vvvvv -e CMD image_url=URL
# Test: ansible-playbook -i inventory --limit arc-switch1028 one_image.yml --tags check_deploy -b -vvvvv
# Run after switch reboot

- set_fact:
    test_name: deploy_check

- set_fact:
    test_run_dir: /tmp
    test_out_dir: /tmp/ansible-loganalyzer-{{ test_name }}-results
    test_files_dir: roles/one-image/files
    test_match_file: check_deploy_match_messages.txt
    test_ignore_file: check_deploy_ignore_messages.txt
    test_expect_file: check_deploy_expect_messages.txt
    common_match_file: loganalyzer_common_match.txt
    loganalyzer_location: roles/test/files/tools/loganalyzer
    test_summary_file: summary.loganalysis.{{ test_name }}.log
    test_result_file: result.loganalysis.{{ test_name }}.log

- name: Copy test match and ignore files to switch
  copy: src="{{ test_files_dir }}/{{ item }}"  dest="{{ test_run_dir }}/{{ item }}"
  with_items:
        - "{{ test_match_file }}"
        - "{{ test_ignore_file }}"
        - "{{ test_expect_file }}"

- name: Copy loganalyzer.py and common match file to the switch
  copy: src="{{ loganalyzer_location }}/{{ item }}" dest="{{ test_run_dir }}/{{ item }}"
  with_items:
        - "loganalyzer.py"
        - "{{ common_match_file }}"

# Create directory to hold results for different runs of loganalyzer
- name: create output directory
  file: path="{{ test_out_dir }}" state=directory

# Create directory where loganalyzer will write output files for current run.
- name: create output directory for current test run
  file: path="{{ test_out_dir }}" state=directory

- debug: msg="Starting loganalyzer on boot log"

- set_fact: cmd="journalctl -b | python {{ test_run_dir }}/loganalyzer.py -l - -a analyze -r {{ test_name }} -o {{ test_out_dir }} -m {{ test_run_dir }}/{{ test_match_file }},{{ test_run_dir }}/{{ common_match_file }} -i {{ test_run_dir }}/{{ test_ignore_file }} -e {{ test_run_dir }}/{{ test_expect_file }} -v"

- debug: msg={{cmd}}

- name: Run loganalyzer {{ test_name }}
  become: True
  shell: "{{ cmd }}"
  args:
      chdir: "{{ test_run_dir }}"

- shell: cat {{ test_out_dir }}/*
  register: out

- debug: var=out.stdout_lines

- name: Get the total number of error messages.
  shell: grep "TOTAL MATCHES" "{{ test_out_dir }}/{{ test_summary_file }}" | sed -n "s/TOTAL MATCHES:[[:space:]]*//p"
  register: errors_found

- name: Check the number of error messages.
  fail: msg="{{ errors_found.stdout }} errors found while running {{ test_name }} test. Please see {{ test_out_dir }}/{{ test_result_file }}"
  when: errors_found.stdout != "0"

- name: Get the total number of found expectedmessages.
  shell: grep "TOTAL EXPECTED" "{{ test_out_dir }}/{{ test_summary_file }}" | sed -n "s/TOTAL EXPECTED MISSING MATCHES:[[:space:]]*//p"
  register: exp_missing

- name: Check whether all expected messages were found.
  fail: msg="{{ exp_missing.stdout }} expected messages are missing in the log. Please see {{ test_out_dir }}/{{ test_result_file }}"
  when: exp_missing.stdout != "0"

- debug: msg="Finished boot log analyzis"


