- name: Init variables.
  set_fact:
      ptf_interfaces: []
      dut_switch_ports: []
      ptf_lag_interfaces: []
      dut_switch_lag_members: []
      testing_ptf_interfaces: []

- name: Getting minigraph facts
  minigraph_facts: host={{ inventory_hostname }}
  become: no
      
- name: Get PTF interfaces from map
  set_fact:
    ptf_interfaces: "{{ ptf_interfaces + [item.split('@')[0]] }}"
  with_lines: "cat {{ ptf_portmap }}"
  when: "'#' not in item"
  
- name: Get switch ports from map
  set_fact:
    dut_switch_ports: "{{ dut_switch_ports + [item.split('@')[1]] }}"
  with_lines: "cat {{ ptf_portmap }}"
  when: "'#' not in item"

- name: Print switch ports and PTF interfaces
  debug: msg="ptf_interfaces={{ ptf_interfaces }} dut_switch_ports={{ dut_switch_ports }}"

- name: Set ptf LAG interfaces
  set_fact:
    ptf_lag_interfaces: "{{ ptf_lag_interfaces + [ (item|replace(\"PortChannel\", \"\")|int / 4)|int ] }}"
  with_items: "{{ minigraph_portchannels.keys() }}"
  
- name: Get switch LAG members
  set_fact:
    dut_switch_lag_members: "{{ dut_switch_lag_members + item['members'] }}"
  with_items: "{{ minigraph_portchannels.values() }}"  

- name: Print LAG members
  debug: msg="ptf_lag_interfaces={{ ptf_lag_interfaces }} dut_switch_lag_members={{ dut_switch_lag_members }}" 
  
- name: Init testing port count
  set_fact:
    testing_ports_count: 0
    testing_ports_id: []

- name: Find the not lag ports for testing
  set_fact:
    testing_ports_id: "{{ testing_ports_id + [item] }}"
  with_items: "{{ ptf_interfaces }}"
  when:
    - dut_switch_ports[item|int] not in dut_switch_lag_members
    - item != '31' # Only for Mellanox testbed. The last port is used for up link from DUT switch

# Get MAC addresses on PTF host
- name: Find testing PTF ports MAC addresses
  shell: bash -c "cat /sys/class/net/eth{0..31}/address"
  register: lladdrs
  delegate_to: '{{ ptf_host }}'

- name: Set lladdr list
  set_fact:
    lladdr: "{{ lladdrs.stdout_lines }}"

- name: Set DST port ID
  set_fact:
    dst_port_id: "{{ testing_ports_id[0] }}"

- name: Set DST port 2 ID
  set_fact:
    dst_port_2_id: "{{ testing_ports_id[1] }}"
    
- name: Set SRC port ID
  set_fact:
    src_port_id: "{{ testing_ports_id[2] }}"

- name: Get DST port 1 IP
  set_fact:
    dst_port_ip: "{{ item['addr'] }}"
  when: item['name'] == minigraph_neighbors[ dut_switch_ports[dst_port_id|int] ]['name'] and item['addr']|ipv4
  with_items:
    - "{{ minigraph_bgp }}"

- name: Get DST port 2 IP
  set_fact:
    dst_port_2_ip: "{{ item['addr'] }}"
  when: item['name'] == minigraph_neighbors[ dut_switch_ports[dst_port_2_id|int] ]['name'] and item['addr']|ipv4
  with_items:
    - "{{ minigraph_bgp }}"

- name: Get SRC port IP
  set_fact:
    src_port_ip: "{{ item['addr'] }}"
  when: item['name'] == minigraph_neighbors[ dut_switch_ports[src_port_id|int] ]['name'] and item['addr']|ipv4
  with_items:
    - "{{ minigraph_bgp }}"

# Get buffers size
- include: roles/test/tasks/qos_get_max_buff_size.yml
  vars:
    target_table: 'BUFFER_PG'
    target_port_name: "{{ dut_switch_ports[src_port_id|int] }}"
    target_pg: '3-4'

- name: Set lossless MAX buffer size
  set_fact:
    lossless_buffer_max_size: "{{ buffer_headroom.stdout|int }}"

- name: Set lossless MAX pool size
  set_fact:
    lossless_buffer_pool_size: "{{ buffer_pool_size.stdout|int }}"

- name: Set lossless buffer alpha
  set_fact:
    lossless_buffer_alpha: "{{ buffer_alpha }}"

- name: Store current lossless buffer profile
  template: src=qos_pfc_profile.j2 dest=/tmp/pfc_lossless_base_profile.json
  vars:
    - pfc_generate_buffer_profile: 'False'

- name: Generate testing lossless buffer profile
  template: src=qos_pfc_profile.j2 dest=/tmp/pfc_lossless_test_profile.json
  vars:
    - pfc_generate_buffer_profile: 'True'
    
- include: roles/test/tasks/qos_get_max_buff_size.yml
  vars:
    target_table: 'BUFFER_PG'
    target_port_name: "***{{ dut_switch_ports[src_port_id|int] }}***"
    target_pg: '0-1'
    
- name: Set lossy MAX buffer size
  set_fact:
    lossy_buffer_max_size: "{{ buffer_max_size }}"

- name: Set lossy headroom size
  set_fact:
    lossy_headroom_size: "{{ buffer_headroom.stdout|int }}"

- name: Store current lossy buffer profile
  template: src=qos_lossy_profile.j2 dest=/tmp/pfc_lossy_base_profile.json
  vars:
    - pfc_generate_buffer_profile: 'False'

- name: Generate testing lossy buffer profile
  template: src=qos_lossy_profile.j2 dest=/tmp/pfc_lossy_test_profile.json
  vars:
    - pfc_generate_buffer_profile: 'True'
    
- include: roles/test/tasks/qos_get_max_buff_size.yml
  vars:
    target_table: 'BUFFER_QUEUE'
    target_port_name: "***{{ dut_switch_ports[src_port_id|int] }}***"
    target_pg: '3-4'
    
- name: Set MAX queue size for {{ dut_switch_ports[src_port_id|int] }}
  set_fact:
    lossless_queue_max_size: "{{ buffer_max_size }}"

- name: Get the WRED profile key for "{{ dut_switch_ports[dst_port_id|int] }}"
  shell: docker exec database redis-cli -n 4 KEYS "QUEUE|*{{ dut_switch_ports[dst_port_id|int] }}*|0-1"
  register: wred_profile_name
  
- fail:
    msg: "Unable to get the wred profile key for {{ dut_switch_ports[dst_port_id|int] }}"
  when: wred_profile_name.stdout == ""
  
- name: Parse WRED profile key
  set_fact:
    wred_profile_name="{{ wred_profile_name.stdout|replace('[','')|replace(']','') }}"
    
- name: Get the WRED profile for "{{ dut_switch_ports[dst_port_id|int] }}"
  shell: docker exec database redis-cli -n 4 HGET "{{ wred_profile_name }}" wred_profile
  register: wred_profile
        
- fail:
    msg: "Unable to get the buffer profile for {{ dut_switch_ports[dst_port_id|int] }}"
  when: wred_profile.stdout == ""
  
- name: Parse WRED profile name
  set_fact:
    wred_profile="{{ wred_profile.stdout|replace('[','')|replace(']','') }}"
    
- name: Get green_max_threshold for {{ dut_switch_ports[dst_port_id|int] }} from {{ wred_profile }}
  shell: docker exec database redis-cli -n 4 HGET "{{ wred_profile }}" green_max_threshold
  register: green_max_threshold
  
- fail:
    msg: "Unable to get the green_max_threshold for {{ dut_switch_ports[dst_port_id|int] }} from {{ wred_profile }}"
  when: green_max_threshold.stdout == ""
  
- name: Parse WRED green_max_threshold
  set_fact:
    green_max_threshold="{{ green_max_threshold.stdout|int }}"
    
- name: Get yellow_max_threshold for {{ dut_switch_ports[dst_port_id|int] }} from {{ wred_profile }}
  shell: docker exec database redis-cli -n 4 HGET "{{ wred_profile }}" yellow_max_threshold
  register: yellow_max_threshold
  
- fail:
    msg: "Unable to get the yellow_max_threshold for {{ dut_switch_ports[dst_port_id|int] }} from {{ wred_profile }}"
  when: yellow_max_threshold.stdout == ""
  
- name: Parse WRED yellow_max_threshold
  set_fact:
    yellow_max_threshold="{{ yellow_max_threshold.stdout|int }}"
    
- name: Get red_max_threshold for {{ dut_switch_ports[dst_port_id|int] }} from {{ wred_profile }}
  shell: docker exec database redis-cli -n 4 HGET "{{ wred_profile }}" red_max_threshold
  register: red_max_threshold
  
- fail:
    msg: "Unable to get the red_max_threshold for {{ dut_switch_ports[dst_port_id|int] }} from {{ wred_profile }}"
  when: red_max_threshold.stdout == ""
  
- name: Parse WRED red_max_threshold
  set_fact:
    red_max_threshold="{{ red_max_threshold.stdout|int }}"
